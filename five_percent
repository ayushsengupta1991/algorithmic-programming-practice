Concentrate on your work. Work very very hard. Most importantly, whenever you are working on something concentrate on that. If you are bored then work on something else for some time. But mainly concentrate on one thing at a time. Have time stamps and targets.

Today complete the distributed lecture topics properly within 3. 

Solve problem E. Only five percent of mental energy should go on thinking about the bigger picture.  

Any engineering problems(often they do not require immense depth of thought, and they require more concentration and persistance), any implementation problem, any algorithmic problem(unless too hard or open), any statistical problem(solvable and not too hard) required to get the product ready, any technology oriented problem. Hard algo problem --> call expert, ML core problems --> call experts, web dev --> call experts. With time you might want to migrate to the business side if you would want to be a CEO/PM. On the other hand, if you wish to remain in the tech field and be an 'expert CTO' or a 'rockstar CTO' then work accordingly.  

Be an expert in distributed systems. Also, be an expert in complicated data structures, system design, information retrieval, and some statistics. Enough to be a cool developer. Be an expert in learning new technologies at a rapid speed. 

Developing large systems is a LOT of 'theory' with tools. Business also, interestingly, is mainly theory. This is primarily because business is so similar to physics. Business conceptualization and implementation are quite similar to algorithm design and then programming/implementation. 

Allocate one hour each day to look into the 'bigger picture'. Read about entrepreneurs, business and watch videos and shit. 
 

